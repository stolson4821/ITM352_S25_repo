Basic Elements of Python Code
Python Keywords
Python keywords are identifiers that are reserved words that the interpreter uses for very specific purposes. As we will see in the chapter, we can create and name variables and functions as part of the instructions that we are writing. However, we are not allowed to use any of the Python reserved words for the names of variables or functions that we are creating. We list some commonly used Python keywords in Table 2.1. We will use all the keywords listed in Table 2.1 within this book. The official list of all Python keywords is in the Python documentation (Python Software Foundation, 2019, “Keywords”).

False

Except

None

for

True

from

and

global

as

if

break

import

continue

in

def

is

elif

not

else

or
 

Operators and Delimiters     		Data Types 
       +			(		Determine what kind of values a piece of data 
       -			)		can have and what kind of operations you
       *			[		can perform with the data.
       **			]		
       /			{	       Boolean (bool) Stores T/F values
       <			}		Integer (int) Stores integers whole #’s
       >			,		Float (float) Stores non whole #’s
       <=			:             String (str) Stores text values like address
       >=			;
       ==			.
       !=			=


Comments begin with a # sign
Variable Assignment is “ variable_name=value “

Mathematic expressions 
+ addition : - subtraction : * multiplication : / division : // integer division : ** exponentiation

These are the basics regarding python coding. 

Python built in expression exceptions 
IndexError - occurs when a subscript of a sequence has a value outside the range of the sequence.
NameError - Occurs when you use an undefined name.
TypeError - Occurs because of a type mismatch. 
ValeuError - Occurs when you pass an argument to a function of the correct type but whose calue is improper. 
ZeroDivisionError - Occurs when you devide by zero.

Python Built in Functions 
A comprehensive list of Python’s built-in functions with their descriptions:

---

A
- abs(x)  
  Returns the absolute value of a number.  
- all(iterable) 
  Returns `True` if all elements in the iterable are true or the iterable is empty.  
- any(iterable) 
  Returns `True` if any element of the iterable is true. If the iterable is empty, returns `False`.  
- ascii(object)  
  Returns a string containing a printable representation of an object, escaping non-ASCII characters.  

B
- bin(x)  
  Converts an integer to a binary string.  
- bool([x])* 
  Converts a value to a Boolean (`True` or `False`).  
- bytearray([source[, encoding[, errors]]]) 
  Returns a mutable byte array.  
- bytes([source[, encoding[, errors]]])  
  Returns an immutable bytes object.  

C
- callable(object) 
  Returns `True` if the object appears callable; otherwise, returns `False`.  
- chr(i)
  Returns the string representing a character for the Unicode code `i`.  
- classmethod(function)  
  Converts a method into a class method.  
- compile(source, filename, mode, flags=0, dont_inherit=False, optimize=-1)**  
  Compiles source into a code or AST object.  
- complex([real[, imag]])  
  Creates a complex number.  

D
- delattr(object, name)  
  Deletes the named attribute from an object.  
- **dict(**kwargs)  
  Creates a new dictionary.  
- dir([object])  
  Attempts to return a list of valid attributes for an object.  
- divmod(a, b)  
  Returns a tuple of the quotient and remainder when dividing `a` by `b`.  

E
- enumerate(iterable, start=0)  
  Returns an enumerate object with (index, value) pairs for the iterable.  
- eval(expression[, globals[, locals]])  
  Parses and evaluates a Python expression.  
- exec(object[, globals[, locals]])  
  Executes the provided code.  

F
- filter(function, iterable)  
  Constructs an iterator from elements of `iterable` for which `function` returns `True`.  
- float([x])  
  Converts a number or string to a floating-point number.  
- format(value[, format_spec])  
  Formats a value as specified by `format_spec`.  
- frozenset([iterable])  
  Returns a new frozenset object, an immutable version of a set.  

G
- getattr(object, name[, default])  
  Returns the value of the named attribute of an object.  

H
- hasattr(object, name)  
  Returns `True` if the object has the named attribute.  
- hash(object)  
  Returns the hash value of the object.  
- help([object])  
  Invokes the built-in help system.  
- hex(x)  
  Converts an integer to a hexadecimal string.  

I
- id(object)  
  Returns the unique identifier for an object.  
- input([prompt])  
  Reads a line of input from the user.  
- int([x[, base]])  
  Converts a number or string to an integer.  
- isinstance(object, classinfo)  
  Returns `True` if the object is an instance of the class or a subclass thereof.  
- issubclass(class, classinfo)  
  Returns `True` if the class is a subclass of another class.  
- iter(object[, sentinel])  
  Returns an iterator object.  

L
- len(s)  
  Returns the length of an object.  
- list([iterable])  
  Creates a list object.  
- locals()  
  Updates and returns a dictionary of the current local symbol table.  

M
- map(function, iterable, ...) 
  Applies a function to all the items in an iterable.  
- *max(iterable, *[, key, default]) 
  Returns the largest item in an iterable or among two or more arguments.  
- memoryview(obj)  
  Returns a memory view object.  
- *min(iterable, *[, key, default]) 
  Returns the smallest item in an iterable or among two or more arguments.  

N
- next(iterator[, default])  
  Retrieves the next item from an iterator.  

O
- object() 
  Returns a new featureless object.  
- oct(x)  
  Converts an integer to an octal string.  
- open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)  
  Opens a file and returns a file object.  
- ord(c)  
  Returns the Unicode code point for a single character.  

P
- pow(x, y[, z])  
  Returns `x` raised to the power `y`, optionally modulo `z`.  
- *print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False)  
  Prints objects to a text stream or another standard output device.  
- property(fget=None, fset=None, fdel=None, doc=None)  
  Retutouch rns a property attribute.  

R
- range(start, stop[, step])  
  Returns an immutable sequence of numbers.  
- repr(object)  
  Returns a string representation of the object.  
- reversed(seq)  
  Returns a reversed iterator for the sequence.  
- round(number[, ndigits])  
  Rounds a number to a given precision.  

S
- set([iterable])  
  Returns a new set object.  
- setattr(object, name, value)  
  Sets the named attribute on an object.  
- slice(stop) or slice(start, stop[, step])  
  Returns a slice object.  
- sorted(iterable, *, key=None, reverse=False)  
  Returns a sorted list from an iterable.  
- staticmethod(function)  
  Returns a static method.  
- str(object='')  
  Returns a string version of an object.  
- sum(iterable, /, start=0)  
  Sums the start value and items of the iterable.  
- super([type[, object-or-type]])  
  Returns a proxy object for delegation.  

T
- tuple([iterable]) 
  Returns a new tuple.  
- type(object)  
  Returns the type of an object.  

V
- vars([object])  
  Returns the `__dict__` attribute of the object.  

Z
- *zip(*iterables)  
  Aggregates elements from multiple iterables into tuples.  

---

